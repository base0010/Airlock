#!/usr/bin/env node
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@babel/runtime/helpers/interopRequireDefault"), require("@babel/runtime/regenerator"), require("@babel/runtime/helpers/asyncToGenerator"), require("@babel/runtime/core-js/object/keys"), require("@babel/runtime/helpers/extends"), require("@babel/runtime/helpers/toConsumableArray"), require("@babel/runtime/core-js/json/stringify"), require("@babel/runtime/helpers/defineProperty"), require("@babel/runtime/core-js/number/is-integer"));
	else if(typeof define === 'function' && define.amd)
		define(["@babel/runtime/helpers/interopRequireDefault", "@babel/runtime/regenerator", "@babel/runtime/helpers/asyncToGenerator", "@babel/runtime/core-js/object/keys", "@babel/runtime/helpers/extends", "@babel/runtime/helpers/toConsumableArray", "@babel/runtime/core-js/json/stringify", "@babel/runtime/helpers/defineProperty", "@babel/runtime/core-js/number/is-integer"], factory);
	else if(typeof exports === 'object')
		exports["@noderize/scripts"] = factory(require("@babel/runtime/helpers/interopRequireDefault"), require("@babel/runtime/regenerator"), require("@babel/runtime/helpers/asyncToGenerator"), require("@babel/runtime/core-js/object/keys"), require("@babel/runtime/helpers/extends"), require("@babel/runtime/helpers/toConsumableArray"), require("@babel/runtime/core-js/json/stringify"), require("@babel/runtime/helpers/defineProperty"), require("@babel/runtime/core-js/number/is-integer"));
	else
		root["@noderize/scripts"] = factory(root["@babel/runtime/helpers/interopRequireDefault"], root["@babel/runtime/regenerator"], root["@babel/runtime/helpers/asyncToGenerator"], root["@babel/runtime/core-js/object/keys"], root["@babel/runtime/helpers/extends"], root["@babel/runtime/helpers/toConsumableArray"], root["@babel/runtime/core-js/json/stringify"], root["@babel/runtime/helpers/defineProperty"], root["@babel/runtime/core-js/number/is-integer"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_17__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printInfo = printInfo;
exports.printDone = printDone;
exports.printWarn = printWarn;
exports.printDebug = printDebug;
exports.printError = printError;
exports.printLines = printLines;

var _chalk = _interopRequireDefault(__webpack_require__(15));

function printInfo(text) {
  console.log("".concat(_chalk.default.blueBright("[INFO]"), " ").concat(text));
}

function printDone(text) {
  console.log("".concat(_chalk.default.greenBright("[DONE]"), " ").concat(text));
}

function printWarn(text) {
  console.warn("".concat(_chalk.default.yellowBright("[WARN]"), " ").concat(text));
}

function printDebug(text) {
  console.log("".concat(_chalk.default.magentaBright("[DEBUG]"), " ").concat(text));
}

function printError(text) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  console.error("".concat(_chalk.default.redBright("[ERROR]"), " ").concat(text));
  error && console.error(error);
}

function printLines(printMethod, lines) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  lines.split("\n").forEach(function (line) {
    return printMethod("".concat(prefix).concat(line));
  });
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinPath = getBinPath;
exports.resolveApp = exports.appDirectory = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(2));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(3));

var _fsExtra = _interopRequireDefault(__webpack_require__(4));

var _path = __webpack_require__(7);

var appDirectory = _fsExtra.default.realpathSync(process.cwd());

exports.appDirectory = appDirectory;

var resolveApp = function resolveApp() {
  for (var _len = arguments.length, relativePath = new Array(_len), _key = 0; _key < _len; _key++) {
    relativePath[_key] = arguments[_key];
  }

  return _path.resolve.apply(void 0, [appDirectory].concat(relativePath));
};

exports.resolveApp = resolveApp;

function getBinPath(_x) {
  return _getBinPath.apply(this, arguments);
}

function _getBinPath() {
  _getBinPath = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(bin) {
    var local, global;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            local = (0, _path.resolve)(__dirname, "..", // scripts
            "node_modules", ".bin", bin);
            _context.next = 3;
            return _fsExtra.default.exists(local);

          case 3:
            if (!_context.sent) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", local);

          case 5:
            global = (0, _path.resolve)(__dirname, "..", // scripts
            "..", // @noderize
            "..", // node_modules
            ".bin", bin);
            _context.next = 8;
            return _fsExtra.default.exists(global);

          case 8:
            if (!_context.sent) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", global);

          case 10:
            return _context.abrupt("return", null);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getBinPath.apply(this, arguments);
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptions = getOptions;

var _stringify = _interopRequireDefault(__webpack_require__(11));

var _isInteger = _interopRequireDefault(__webpack_require__(17));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(12));

var _keys = _interopRequireDefault(__webpack_require__(8));

var _extends3 = _interopRequireDefault(__webpack_require__(9));

var _fsExtra = _interopRequireDefault(__webpack_require__(4));

var _path = __webpack_require__(5);

var _path2 = _interopRequireDefault(__webpack_require__(7));

var _lodash = _interopRequireDefault(__webpack_require__(13));

var _minimist = _interopRequireDefault(__webpack_require__(18));

var _cosmiconfig = _interopRequireDefault(__webpack_require__(14));

var _print = __webpack_require__(1);

function run() {
  var runners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 ? arguments[1] : undefined;
  var extra = arguments.length > 2 ? arguments[2] : undefined;

  if (!Array.isArray(runners)) {
    runners = [runners];
  }

  runners.forEach(function (runner) {
    value = runner(value, extra);
  });
  return value;
}

function getOptions(rawArgs) {
  var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  var childPackage = _fsExtra.default.readJsonSync((0, _path.resolveApp)("package.json"));

  var types = {
    srcDirectory: {
      type: String,
      default: "src"
    },
    distDirectory: {
      type: String,
      default: "dist"
    },
    languages: {
      type: Array,
      subtype: String,
      default: ["javascript"]
    },
    bundles: {
      type: Array,
      subtype: Object,
      default: function _default(_ref) {
        var languages = _ref.options.languages;
        return [{
          entry: ["index." + (languages.length === 1 && languages[0] === "typescript" ? "ts" : "js")],
          output: "index.js"
        }];
      },
      run: function run(bundles) {
        return bundles.map(function (bundle) {
          return (0, _extends3.default)({}, bundle, {
            entry: Array.isArray(bundle.entry) ? bundle.entry : [bundle.entry]
          });
        });
      }
    },
    startFile: {
      type: String,
      default: function _default(_ref2) {
        var options = _ref2.options,
            childPackage = _ref2.childPackage;
        return (0, _path.resolveApp)(childPackage.main ? "" : options.distDirectory, childPackage.main || options.bundles[0].output);
      },
      run: function run(startFile, _ref3) {
        var options = _ref3.options;
        return (0, _path.resolveApp)(options.distDirectory, startFile);
      }
    },
    shebang: {
      type: Boolean,
      default: function _default(_ref4) {
        var childPackage = _ref4.childPackage;
        return childPackage.bin !== undefined;
      }
    },
    sourcemap: {
      type: Boolean,
      default: true
    },
    runOnWatch: {
      type: Boolean,
      default: true
    },
    minify: {
      type: Boolean,
      default: false
    },
    includeExternal: {
      type: Boolean,
      default: false
    },
    name: {
      type: String,
      default: function _default(_ref5) {
        var childPackage = _ref5.childPackage;
        return childPackage.name;
      }
    },
    buildThreads: {
      type: Number,
      integer: true,
      min: 1,
      default: 3
    },
    static: {
      type: Object,
      default: {}
    },
    globals: {
      type: Object,
      default: {}
    },
    targets: {
      type: Object,
      default: {
        node: true
      }
    },
    debug: {
      type: Boolean,
      default: false
    },
    babel: {
      type: Object,
      default: {}
    },
    target: {
      type: String,
      default: "node",
      choices: ["node", "web"]
    },
    runtime: {
      type: String,
      default: function _default(_ref6) {
        var childPackage = _ref6.childPackage;
        return (0, _keys.default)(childPackage.dependencies || {}).includes("@noderize/runtime") ? "noderize" : "include";
      },
      choices: ["noderize", "include", "polyfill", "none"]
    },
    env: {
      type: Object,
      default: {
        production: {
          sourcemap: false,
          targets: {}
        },
        test: {},
        development: {}
      },
      merge: true,
      notArg: true
    }
  };
  var boleans = (0, _keys.default)(types).filter(function (type) {
    return types[type].type === Boolean;
  }); // Parse args

  var args = (0, _minimist.default)(rawArgs || [], {
    boolean: boleans,
    string: (0, _keys.default)(types).filter(function (type) {
      return types[type].type === String || types[type].type === Object;
    }),
    default: boleans.reduce(function (total, bool) {
      return (0, _extends3.default)({}, total, (0, _defineProperty2.default)({}, bool, null));
    }, {})
  });
  var options = {};

  try {
    // Load from "noderize" key in package.json, .noderizerc, or noderize.config.js
    var results = (0, _cosmiconfig.default)("noderize", {
      sync: true
    }).load();

    if (results) {
      var configOptions = results.config;
      (0, _keys.default)(configOptions).forEach(function (configOptionKey) {
        if (types[configOptionKey] !== undefined) {
          var type = types[configOptionKey];
          var value = configOptions[configOptionKey];

          if (type.type === Array && !Array.isArray(value)) {
            value = [value];
          }

          value = run(type.run, value, {
            options: options
          });
          options[configOptionKey] = value;
        } else {
          (0, _print.printWarn)("Config key '".concat(configOptionKey, "' doesn't do anything."));
        }
      });
    }
  } catch (error) {
    (0, _print.printError)("Could not read Noderize configuration.", error);
  }

  function parseArgType(arg, type, value) {
    switch (type.type) {
      case Boolean:
      case String:
        return type.type(value);

      case Number:
        var number = parseFloat(value);

        if (isNaN(number)) {
          (0, _print.printError)("Argument '".concat(arg, "' is not a number."));
          break;
        } else {
          return number;
        }

      case Object:
        try {
          return JSON.parse(value);
        } catch (error) {
          (0, _print.printError)("Could not parse JSON for argument '".concat(arg, "'."), error.message);
          break;
        }

      case Array:
        if (!Array.isArray(value)) {
          value = [value];
        }

        return value.map(function (value) {
          return parseArgType(arg, {
            type: type.subtype
          }, value);
        });
    }
  }

  (0, _keys.default)(args).filter(function (arg) {
    return (0, _keys.default)(types).includes(arg);
  }).filter(function (arg) {
    return !types[arg].notArg;
  }).forEach(function (arg) {
    var type = types[arg];
    var argValue = args[arg];

    if (argValue !== null) {
      var value = parseArgType(arg, type, argValue);

      if (value !== undefined) {
        value = run(type.run, value, {
          options: options
        });
        options[arg] = value;
      }
    }
  });
  (0, _keys.default)(types).forEach(function (typeName) {
    var value = options[typeName];
    var type = types[typeName];

    if (value === undefined || type.merge) {
      var defaultValue = type.default;

      if (defaultValue instanceof Function) {
        defaultValue = defaultValue({
          options: options,
          childPackage: childPackage
        });
      }

      if (type.merge) {
        options[typeName] = (0, _lodash.default)({}, defaultValue, options[typeName]);
      } else {
        options[typeName] = defaultValue;
      }
    }
  }); // Checks

  (0, _keys.default)(options).forEach(function (option) {
    var value = options[option];
    var type = types[option];

    if (type.type === Number) {
      if (type.integer && !(0, _isInteger.default)(value)) {
        (0, _print.printError)("Option '".concat(option, "' is not an integer."));
      }

      if (type.min !== undefined && value < type.min) {
        (0, _print.printError)("Option '".concat(option, "' is under minimum (").concat(type.min, ")."));
      }

      if (type.max !== undefined && value > type.max) {
        (0, _print.printError)("Option '".concat(option, "' is over maximum (").concat(type.max, ")."));
      }
    }

    if (type.choices !== undefined) {
      if (!type.choices.includes(value)) {
        (0, _print.printError)("Invalid choice for ".concat(option, ": '").concat(value, "'."));
      }
    }
  });
  var languageList = options.languages;
  options.languages = {
    javascript: false,
    typescript: false
  };
  languageList.forEach(function (language) {
    if (options.languages[language] !== undefined) {
      options.languages[language] = true;
    } else {
      (0, _print.printWarn)("Unknown language '".concat(language, "'"));
    }
  }); //
  //
  // if (args.babelPlugins !== undefined) {
  // 	if (!Array.isArray(args.babelPlugins)) {
  // 		args.babelPlugins = [args.babelPlugins];
  // 	}
  // 	options.babel.plugins = args.babelPlugins.map(plugin => {
  // 		try {
  // 			return JSON.parse(plugin);
  // 		} catch (error) {
  // 			printWarn(`Could not parse babel plugin.`);
  // 		}
  // 	});
  // }
  //
  // if (args.babelPresets !== undefined) {
  // 	if (!Array.isArray(args.babelPresets)) {
  // 		args.babelPresets = [args.babelPresets];
  // 	}
  // 	options.babel.presets = args.babelPresets.map(preset => {
  // 		try {
  // 			return JSON.parse(preset);
  // 		} catch (error) {
  // 			printWarn(`Could not parse babel preset.`);
  // 		}
  // 	});
  // }
  //
  // boleans.forEach(bool => {
  // 	if (args[bool] !== null) {
  // 		options[bool] = !!args[bool];
  // 	}
  // });
  //
  // strings.forEach(string => {
  // 	if (args[string] !== undefined) {
  // 		options[string] = args[string];
  // 	}
  // });
  //
  // if (args.languages !== undefined) {
  // 	options.languages = args.languages;
  // }
  //
  // // Parse languages to list then object
  // if (options.languages === undefined) {
  // 	// No loaders set, use babel
  // 	options.languages = ["javascript"];
  // } else if (!Array.isArray(options.languages)) {
  // 	options.languages = [options.languages]; // Support single string
  // }
  //
  // const languageList = options.languages;
  //
  // options.languages = { javascript: false, typescript: false };
  // languageList.forEach(language => {
  // 	if (options.languages[language] !== undefined) {
  // 		options.languages[language] = true;
  // 	} else {
  // 		printWarn(`Unknown language '${language}'`);
  // 	}
  // });
  //
  // if (args.bundles !== undefined) {
  // 	if (!Array.isArray(args.bundles)) {
  // 		args.bundles = [args.bundles];
  // 	}
  //
  // 	options.bundles = args.bundles
  // 		.map(bundle => {
  // 			try {
  // 				return JSON.parse(bundle);
  // 			} catch (error) {
  // 				printWarn(`Could not parse bundle.`);
  // 				return false;
  // 			}
  // 		})
  // 		.filter(Boolean);
  //
  // 	// If no bundles were found, reset
  // 	if (options.bundles.length === 0) {
  // 		options.bundles = undefined;
  // 	}
  // }
  //
  // // Bundles
  // if (options.bundles === undefined) {
  // 	let entry = "index.js";
  // 	if (languageList.length === 1 && languageList[0] === "typescript") {
  // 		entry = "index.ts";
  // 	}
  //
  // 	options.bundles = [{ entry, output: "index.js" }];
  // }
  //
  // options.bundles = options.bundles.map(bundle => {
  // 	const output = merge({}, bundle);
  // 	if (!Array.isArray(output.entry)) {
  // 		output.entry = [output.entry];
  // 	}
  // 	if (output.polyfill === undefined) {
  // 		output.polyfill = true;
  // 	}
  //
  // 	return output;
  // });
  //
  //
  // // Check if bundle entries exist
  // // Iterate bundles
  // options.bundles.map(bundle => {
  // 	// Iterate each entry of bundle (excluding externals starting with ~)
  // 	bundle.entry.filter(entry => !entry.startsWith("~")).forEach(entry => {
  // 		// Check & error
  // 		const exists = fs.existsSync(resolveApp("src", entry));
  // 		if (!exists) {
  // 			printError(`Could not find bundle entry at src/${entry}`);
  // 		}
  // 	});
  // });
  //
  // if (options.startFile === undefined) {
  // 	if (childPackage.main !== undefined) {
  // 		options.startFile = childPackage.main;
  // 	} else {
  // 		options.startFile = path.join(
  // 			"dist",
  // 			Object.values(options.bundles)[0].output
  // 		);
  // 	}
  // }
  //

  options.currentEnv = env || args.env || process.env.NODE_ENV || "development"; // Replace with env value

  if (options.currentEnv) {
    var envConfig = options.env[options.currentEnv];

    if (envConfig === undefined) {
      (0, _print.printWarn)("Could not find '".concat(options.currentEnv, "' environment."));
    } else {
      (0, _keys.default)(envConfig).forEach(function (envKey) {
        options[envKey] = envConfig[envKey];
      });
    }
  }

  if (options.debug || args.showConfig) {
    (0, _print.printLines)(_print.printDebug, (0, _stringify.default)(options, null, "\t"), "\t");
  }

  if (args.showConfig) {
    process.exit(0);
  }

  return (0, _extends3.default)({}, options, {
    args: args
  });
}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_11__;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("lodash.merge");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("cosmiconfig");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("chalk");

/***/ }),
/* 16 */,
/* 17 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_17__;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("minimist");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(10));

var _default = function _default() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      targets = _ref.targets,
      _ref$babel = _ref.babel,
      _ref$babel$presets = _ref$babel.presets,
      presets = _ref$babel$presets === void 0 ? [] : _ref$babel$presets,
      _ref$babel$plugins = _ref$babel.plugins,
      plugins = _ref$babel$plugins === void 0 ? [] : _ref$babel$plugins,
      _ref$runtime = _ref.runtime,
      runtime = _ref$runtime === void 0 ? "include" : _ref$runtime;

  return {
    presets: [["@babel/preset-env", {
      targets: targets
    }], "@babel/preset-stage-2", "@babel/preset-flow"].concat((0, _toConsumableArray2.default)(presets)),
    plugins: ["@babel/plugin-proposal-decorators", (runtime === "noderize" || runtime === "include") && "@babel/plugin-transform-runtime"].concat((0, _toConsumableArray2.default)(plugins)).filter(Boolean)
  };
};

exports.default = _default;

/***/ }),
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(42);


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.process = process;

var _extends2 = _interopRequireDefault(__webpack_require__(9));

var _babelJest = __webpack_require__(43);

var _createBabelConfig = _interopRequireDefault(__webpack_require__(19));

var _typescript = _interopRequireDefault(__webpack_require__(44));

var _tsconfig = _interopRequireDefault(__webpack_require__(45));

var _options = __webpack_require__(6);

var options = (0, _options.getOptions)(null, "test");

function process(src, path) {
  var isTypeScript = path.endsWith(".ts");
  var isJavaScript = path.endsWith(".js");

  if (isTypeScript && options.languages.typescript) {
    src = _typescript.default.transpile(src, _tsconfig.default.compilerOptions, path, []);
  }

  if (isJavaScript || isTypeScript) {
    var _createTransformer;

    // Must use a temporary file name if TypeScript.
    var fileName = isJavaScript ? path : "file.js";

    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }

    src = (_createTransformer = (0, _babelJest.createTransformer)((0, _extends2.default)({}, (0, _createBabelConfig.default)(options)))).process.apply(_createTransformer, [src, fileName].concat(rest));
  }

  return src;
}

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("babel-jest");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("typescript");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = {"compilerOptions":{"noImplicitAny":true,"module":"commonjs","moduleResolution":"node","target":"es5","experimentalDecorators":true},"exclude":["node_modules","**/*.spec.ts","**/*.test.ts","__tests__"]}

/***/ })
/******/ ]);
});